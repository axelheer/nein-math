name: everything
on: [ push, pull_request ]
env:
  DOTNET_VERSION: 3.1.201
jobs:
  build:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install packages
        run: dotnet restore --no-cache
      - name: Build solution (w/o version suffix)
        run: dotnet build --configuration Release --no-restore
        if: github.ref == 'refs/heads/release'
      - name: Build solution (w/ version suffix)
        run: dotnet build --configuration Release --no-restore --version-suffix preview.${{ github.run_number }}
        if: github.ref != 'refs/heads/release'
      - name: Test solution
        run: dotnet test --configuration Release --no-build --results-directory test-results --settings test.runsettings
      - name: Publish coverage
        uses: codecov/codecov-action@v1
        with:
          file: test-results/*/coverage.opencover.xml
      - name: Create packages (w/o version suffix)
        run: dotnet pack --configuration Release --no-build --output pkg
        if: github.ref == 'refs/heads/release'
      - name: Create packages (w/ version suffix)
        run: dotnet pack --configuration Release --no-build --output pkg --version-suffix preview.${{ github.run_number }}
        if: github.ref != 'refs/heads/release'
      - name: Upload packages
        uses: actions/upload-artifact@v1
        with:
          name: packages
          path: pkg
        if: runner.os == 'windows'
  prerelease:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/release'
    steps:
      - name: Download packages
        uses: actions/download-artifact@v1
        with:
          name: packages
          path: .
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/axelheer/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish packages
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
  release:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    steps:
      - name: Download packages
        uses: actions/download-artifact@v1
        with:
          name: packages
          path: .
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
      - name: Publish packages
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate
      - name: Extract version
        run: |
          if ((gci | select -p name -f 1) -match '\d+\.\d+\.\d+') {
            echo "::set-env name=RELEASE_VERSION::$($matches[0])"
          }
          else {
            write-error "There is no version."
          }
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: Version ${{ env.RELEASE_VERSION }}
          draft: true
